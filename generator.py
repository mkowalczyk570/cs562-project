import subprocess


def main():
    """
    This is the generator code. It should take in the MF structure and generate the code
    needed to run the query. That generated code should be saved to a 
    file (e.g. _generated.py) and then run.
    """

    body = """
    ### get 6 phi operators

    manual = input("Do you want to manually enter input values of phi? (y/n): ")
    if(manual == 'y'):
        print("Enter the values of S, n, v, F, sig, and G(optional):")
        print("for values with multiple inputs please separate by commas")
        S = ""
        while S == "":
            S = input("Enter the value of S: ")
        S = S.split(",")

        n = ""
        while n == "":
            n = input("Enter the value of n: ")
        n = n.split(",")

        v = ""
        while v == "":
            v = input("Enter the value of v: ")
        v = v.split(",")

        F = ""
        while F == "":
            F = input("Enter the value of F: ")
        F = F.replace("[", "")
        F = F.replace("]", "")
        F = F.split(",")

        sig = ""
        while sig == "":
            sig = input("Enter the value of sig: ")
        sig = sig.split(",")

        G = input("Enter the value of G(optional): ")
        G = G.split(",") if G != "" else []
    else:
        print("Using file for input values")
        input_file = input("Enter the name of the file: ")
        with open(input_file, 'r') as f:
            for line in f:
                ## save each line as operator of phi
                print(line, end='')

    
    
    ### Create MF Structure - holds grouping attributes (v) and aggregation functions (F)
    MF_struct = {};

    for i in range(len(v)):
        name = "grouping_attribute_" + str(i)
        MF_struct[name] = v[i]

    for i in range(len(F)):
        name = "aggregation_function_" + str(i)
        MF_struct[name] = F[i]

    print(MF_struct)
    
    
    ### iterate through the rows in table
    for row in cur:
        if row['quant'] > 10:
            _global.append(row)
    """

    # Note: The f allows formatting with variables.
    #       Also, note the indentation is preserved.
    tmp = f"""
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():

## access database
    load_dotenv()

    user = os.getenv('USER')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')
    port = os.getenv('PORT')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password + " port=" + port,
                            cursor_factory=psycopg2.extras.DictCursor)
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    _global = []
    {body}

    ### get 6 phi operators
    
    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    """

    # Write the generated code to a file
    open("_generated.py", "w").write(tmp)
    # Execute the generated code
    subprocess.run(["python", "_generated.py"])


if "__main__" == __name__:
    main()
